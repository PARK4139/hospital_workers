version: '3.8'

services:
  # 페이지 서버 (Next.js 프론트엔드) - 개발 모드 (Hot Reload)
  page-server:
    build:
      context: ./page_server
      dockerfile: Dockerfile.dev
    ports:
      - "5173:5173"
    volumes:
      - ./page_server:/app  # 코드 변경사항 즉시 반영
      - /app/node_modules  # node_modules 제외
    environment:
      - NODE_ENV=development
    networks:
      - hospital-network
    restart: unless-stopped

  # API 서버 (FastAPI 백엔드) - 개발 모드 최적화
  api-server:
    build:
      context: ./api_server
      dockerfile: Dockerfile
    # 호스트 포트 바인딩 불필요 (Nginx 프록시로 접근)
    environment:
      - DATABASE_URL=postgresql://postgres:password@db-server:5432/hospital_workers
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=development
      - PYTHONPATH=/app
    volumes:
      - ./api_server:/app  # 코드 변경사항 즉시 반영
      - /app/__pycache__    # 캐시 제외
      - /app/.pytest_cache   # 테스트 캐시 제외
    depends_on:
      - db-server
      - redis
    networks:
      - hospital-network
    restart: unless-stopped

  # 데이터베이스 서버 (PostgreSQL) - 개발 모드
  db-server:
    build:
      context: ./db_server
      dockerfile: Dockerfile
    environment:
      - POSTGRES_DB=hospital_workers
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db_server/migrations:/docker-entrypoint-initdb.d  # 초기화 스크립트
    ports:
      - "15432:5432"
    networks:
      - hospital-network
    restart: unless-stopped

  # Nginx 리버스 프록시 - 개발 모드
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./page_server/nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - page-server
      - api-server
    networks:
      - hospital-network
    restart: unless-stopped

  # Redis 캐시/세션 - 개발 모드
  redis:
    image: redis:7-alpine
    ports:
      - "16379:6379"
    volumes:
      - redis_data:/data
    networks:
      - hospital-network
    restart: unless-stopped

volumes:
  db_data:
  redis_data:

networks:
  hospital-network:
    driver: bridge
